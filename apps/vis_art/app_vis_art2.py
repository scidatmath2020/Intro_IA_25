# -*- coding: utf-8 -*-
"""
Created on Sun Jul 27 18:22:12 2025

@author: Usuario
"""

# clasificador_streamlit.py

import streamlit as st
import pandas as pd
import numpy as np
import os
import zipfile
import tempfile
import shutil
from PIL import Image
from collections import Counter
import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.applications import MobileNetV2
from tensorflow.keras.layers import Dense, GlobalAveragePooling2D
from tensorflow.keras.models import Model
from tensorflow.keras.optimizers import Adam
from tensorflow.keras import backend as K

# --- Funciones auxiliares ---

def descomprimir_zip(archivo_zip):
    temp_dir = tempfile.mkdtemp()
    try:
        with zipfile.ZipFile(archivo_zip, 'r') as zip_ref:
            zip_ref.extractall(temp_dir)
    except Exception as e:
        st.error(f"Error al descomprimir: {e}")
    return temp_dir

def crear_generadores(directorio, tamano=(224, 224), batch=32):
    datagen = ImageDataGenerator(
        rescale=1./255,
        validation_split=0.2
    )
    train_gen = datagen.flow_from_directory(directorio, target_size=tamano,
                                            batch_size=batch, class_mode='categorical',
                                            subset='training', shuffle=True)
    val_gen = datagen.flow_from_directory(directorio, target_size=tamano,
                                          batch_size=batch, class_mode='categorical',
                                          subset='validation', shuffle=False)
    return train_gen, val_gen

def crear_modelo(num_clases):
    K.clear_session()
    st.write("‚öôÔ∏è Inicializando MobileNetV2...")
    base_model = MobileNetV2(weights='imagenet', include_top=False, input_shape=(224, 224, 3))
    for layer in base_model.layers:
        layer.trainable = False
    x = GlobalAveragePooling2D()(base_model.output)
    output = Dense(num_clases, activation='softmax')(x)
    model = Model(inputs=base_model.input, outputs=output)
    model.compile(optimizer=Adam(1e-4), loss='categorical_crossentropy', metrics=['accuracy'])
    return model

def clasificar_imagenes(modelo, lista_rutas, diccionario_clases):
    resultados = []
    rev_map = {v: k for k, v in diccionario_clases.items()}
    for ruta in lista_rutas:
        try:
            img = Image.open(ruta).convert("RGB").resize((224, 224))
            arr = np.expand_dims(np.array(img) / 255.0, 0)
            pred = modelo.predict(arr, verbose=0)
            idx = int(np.argmax(pred))
            resultados.append({
                "archivo": os.path.basename(ruta),
                "clase_predicha": rev_map.get(idx, "desconocida"),
                "confianza": round(float(np.max(pred)), 4)
            })
        except Exception as e:
            st.warning(f"‚ö†Ô∏è Error en {ruta}: {e}")
    return resultados

# --- Interfaz principal ---

st.set_page_config(page_title="Clasificador de Im√°genes", layout="centered")
st.title("üß† Clasificador de Im√°genes Multiclase")
st.write("Entrena un modelo con im√°genes organizadas en carpetas y luego clasifica nuevas im√°genes.")

# Paso¬†1: Entrenamiento
st.header("Paso¬†1: Entrenamiento")
zip_ent = st.file_uploader("üì¶ Sube un archivo ZIP con carpetas por clase", type=["zip"])
if zip_ent:
    with st.spinner("üîç Procesando ZIP..."):
        dir_ent = descomprimir_zip(zip_ent)
        train_gen, val_gen = crear_generadores(dir_ent)
        
        if train_gen.samples == 0:
            st.error("‚ùå No se encontraron im√°genes v√°lidas en el ZIP.")
        else:
            st.success(f"‚úÖ {train_gen.samples} im√°genes, {len(train_gen.class_indices)} clases.")
            epocas = st.slider("N√∫mero de √©pocas", 1, 20, 3)
            if st.button("üöÄ Entrenar modelo"):
                with st.spinner("üß† Entrenando..."):
                    modelo = crear_modelo(len(train_gen.class_indices))
                    modelo.fit(train_gen, validation_data=val_gen, epochs=epocas)
                    loss, accuracy = modelo.evaluate(val_gen, verbose=0)
                    st.session_state["modelo"] = modelo
                    st.session_state["clases"] = train_gen.class_indices
                    st.success(f"üìà Precisi√≥n en validaci√≥n: {round(accuracy * 100, 2)}%")
        shutil.rmtree(dir_ent)

# Paso¬†2: Clasificaci√≥n
st.header("Paso¬†2: Clasificaci√≥n")
if "modelo" not in st.session_state:
    st.info("‚ÑπÔ∏è Primero entrena un modelo en el Paso¬†1.")
else:
    zip_imgs = st.file_uploader("üì∑ Sube ZIP con im√°genes a clasificar", type=["zip"])
    if zip_imgs:
        with st.spinner("üîç Clasificando im√°genes..."):
            dir_test = descomprimir_zip(zip_imgs)
            rutas = [
                os.path.join(dp, f)
                for dp, _, files in os.walk(dir_test)
                for f in files if f.lower().endswith(('.jpg', '.jpeg', '.png'))
            ]
            if len(rutas) == 0:
                st.warning("‚ö†Ô∏è No se encontraron im√°genes v√°lidas.")
            else:
                resultados = clasificar_imagenes(st.session_state["modelo"], rutas, st.session_state["clases"])
                df_res = pd.DataFrame(resultados)
                st.write("### üìã Resultados (primeras 50 filas)")
                st.dataframe(df_res.head(50))
                conteo = Counter(df_res["clase_predicha"])
                st.write("Distribuci√≥n:", dict(conteo))
                tsv = df_res.to_csv(sep="\t", index=False).encode("utf-8")
                st.download_button("üì• Descargar resultados (.tsv)", tsv, "resultados.tsv", "text/tab-separated-values")
            shutil.rmtree(dir_test)

# Instrucciones
st.sidebar.markdown("""
### üßæ Instrucciones
1. **Entrenamiento**: ZIP con carpetas por clase ‚û§ Paso¬†1 ‚û§ Entrenar.
2. **Clasificaci√≥n**: ZIP con im√°genes sueltas ‚û§ Paso¬†2 ‚û§ Clasificar.
3. Revisa los resultados y descarga el archivo `.tsv`.
""")
